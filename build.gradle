import java.nio.file.Files
import java.nio.file.Path

plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// For configs

	// Cloth config 1.16.2+
	modApi("me.shedaniel.cloth:config-2:4.7.0-unstable") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "me.shedaniel.cloth:config-2:4.7.0-unstable"

//	// Cloth config 1.16.1
//	modApi("me.shedaniel.cloth:config-2:4.6.0") {
//		exclude(group: "net.fabricmc.fabric-api")
//	}
//	include "me.shedaniel.cloth:config-2:4.6.0"

	// Auto config 1.16.2+
	modApi("me.sargunvohra.mcmods:autoconfig1u:3.2.0-unstable") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "me.sargunvohra.mcmods:autoconfig1u:3.2.0-unstable"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Modmenu 1.16.2+
	modImplementation "io.github.prospector:modmenu:1.14.6+build.31"
//	// Modmenu 1.16.1
//	modImplementation "io.github.prospector:modmenu:1.14.5+build.30"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

curseforge {
	// Secret API Key for CurseForge
	if (System.getenv('CURSEFORGE_API_KEY') != null) {
		// For Drone CI
		apiKey = System.getenv('CURSEFORGE_API_KEY')
	} else {
		// This is to get CurseGradle to shut up about the API Key missing if you are not using a CurseGradle task
		// Issue Report: https://github.com/matthewprenger/CurseGradle/issues/32
		apiKey = "DUMMY"
	}

	project {
		id = '404325'
		changelog = 'Some changes'
		releaseType = 'release'
		addGameVersion project.minecraft_version

		// Changelog Info - Changelog will be autogenerated
		if (Files.exists(Path.of(System.getProperty("user.dir"), "CHANGELOG.md"))) { // Change To CI?
			changelog = file(Path.of(System.getProperty("user.dir"), "CHANGELOG.md"))
			changelogType = 'markdown'
		} else {
			changelog = "# Generated changelog missing - Please refer to https://github.com/HeyItsMeNobody/karam for changes"
			changelogType = 'markdown'
		}

		mainArtifact(remapJar) {
			displayName = "Karam $project.version - 1.16.2-3"

			relations {
				requiredDependency 'fabric-api'
				embeddedLibrary 'auto-config-updated-api'
				optionalDependency 'modmenu'
			}
		}
	}

	options {
		debug = false // defaults to false
		javaVersionAutoDetect = true // defaults to true
		javaIntegration = true // defaults to true
		forgeGradleIntegration = false // defaults to true
	}
}
